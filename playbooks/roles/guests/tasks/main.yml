- name: get list of vms
  virt:
    command: list_vms
  register: virt_vms
- name: Ensure RHEL image is in correct place
  copy:
    src: "/root/{{rhel_image}}"
    dest: "/var/lib/libvirt/images/{{rhel_image}}"
- name: create dirs for userdata
  file:
    path: "/tmp/{{item.name}}"
    state: directory
    owner: root
    group: root
    mode: '0700'
  when: item.name not in virt_vms.list_vms
  with_items: "{{guests}}"

- name: create user-data files
  template:
    src: user-data.j2
    dest: "/tmp/{{item.name}}/user-data"
    owner: root
    group: root
    mode: '0600'
  when: item.name not in virt_vms.list_vms
  with_items: "{{ guests }}"


- name: create meta-data files
  template:
    src: meta-data.j2
    dest: "/tmp/{{ item.name }}/meta-data"
    owner: root
    group: root
    mode: '0600'
  when: item.name not in virt_vms.list_vms
  with_items: "{{ guests }}"
- name: create cloud-init CDs for VMs
  command: /usr/bin/genisoimage -o "/var/lib/libvirt/images/cloud-init-{{item.name}}.iso" -V cidata -r -J meta-data user-data
  args:
    chdir: "/tmp/{{item.name}}"
    creates: "/var/lib/libvirt/images/cloud-init-{{item.name}}.iso"
  when: item.name not in virt_vms.list_vms
  with_items: "{{guests}}"
- name: ensure logical volumes for virtual os disks
  lvol:
    vg: "{{volume_group}}"
    lv: "{{item.name}}-a"
    size: "{{item.disk_os_size}}"
  with_items: "{{guests}}"

- name: install rhel for VMs
  command: qemu-img convert -O raw "/var/lib/libvirt/images/{{rhel_image}}" "/dev/vg0/{{item.name}}-a"
  when: item.name not in virt_vms.list_vms
  with_items: "{{guests}}"
- name: create vm
  command: "virt-install --name {{item.name}}
           --connect qemu:///system
           --arch x86_64
           --ram {{item.mem}}
           --vcpus {{item.cpu}}
           --cpu host
           --os-type {{item.os_type}}
           --os-variant {{item.os_variant}}
           --network {{item.network}}
           --{{item.virt_hypervisor}}
           --virt-type {{item.virt_type}}
           --disk /dev/{{volume_group}}/{{item.name}}-a,device=disk,format=raw
           --disk /var/lib/libvirt/images/cloud-init-{{item.name}}.iso,device=cdrom
           --noautoconsole
           --autostart"
  when: item.name not in virt_vms.list_vms
  with_items: "{{guests}}"
- name: start virtual machines
  virt:
    name: "{{ item.name }}"
    state: running
  with_items: "{{guests}}"
- name: Wait 30 secs for all VMs to get IP
  pause:
    seconds: 30
