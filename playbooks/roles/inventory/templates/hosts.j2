# Create an OSEv3 group that contains the masters and nodes groups
# For highly available load balancer a custom setup is needed, see
# for example https://github.com/myllynen/openshift-ha-load-balancer
[OSEv3:children]
masters
nodes
etcd
{% if number_of_cns_nodes == '3' %}
#CNSglusterfs
{% endif %}

# Set variables common for all OSEv3 hosts
[OSEv3:vars]
ansible_ssh_user={{remote_user}}
ansible_become=yes

# https://github.com/openshift/openshift-ansible/blob/master/DEPLOYMENT_TYPES.md
deployment_type=openshift-enterprise
containerized=false
openshift_use_crio=true
openshift_crio_enable_docker_gc=true

# Skip env validation
openshift_disable_check=disk_availability,memory_availability
openshift_enable_unsupported_configurations=True

# Configure usage of openshift_clock role.
openshift_clock_enabled=true
	
# Set upgrade restart mode for full system restarts
openshift_rolling_restart_mode=system

# Enable cockpit
osm_use_cockpit=false
osm_cockpit_plugins=['cockpit-kubernetes', 'cockpit-pcp', 'setroubleshoot-server']

# Docker / Registry Configuration
openshift_docker_disable_push_dockerhub=True
openshift_docker_options="--log-driver=journald --log-level=warn --ipv6=false"
openshift_docker_insecure_registries=docker-registry.default.svc,docker-registry.default.svc.cluster.local

# Native high availability cluster method with optional load balancer.
#openshift_master_cluster_method=native
openshift_master_cluster_hostname=master01
openshift_master_cluster_public_hostname={{_master_dns}}
openshift_master_default_subdomain={{_apps_dns}}
openshift_master_overwrite_named_certificates=True

#openshift_master_named_certificates=[{"certfile": "/home/cloud-user/.acme.sh/master.ocp.ninja/master.ocp.ninja.cer", "keyfile": "/home/cloud-user/.acme.sh/master.ocp.ninja/master.ocp.ninja.key", "cafile": "/home/cloud-user/.acme.sh/master.ocp.ninja/ca.cer"}]
#openshift_hosted_router_certificate={"certfile": "/root/.acme.sh/master.ocp.ninja/master.ocp.ninja.cer", "keyfile": "/root/.acme.sh/master.ocp.ninja/master.ocp.ninja.key", "cafile": "/home/cloud-user/.acme.sh/master.ocp.ninja/ca.cer"}

# Configure nodeIP in the node config
# This is needed in cases where node traffic is desired to go over an
# interface other than the default network interface.

# Configure the multi-tenant SDN plugin (default is 'redhat/openshift-ovs-subnet')
os_sdn_network_plugin_name=redhat/openshift-ovs-multitenant

# Configure SDN cluster network and kubernetes service CIDR blocks. These
# network blocks should be private and should not conflict with network blocks
# in your infrastructure that pods may require access to. Can not be changed
# after deployment.
osm_cluster_network_cidr=10.1.0.0/16
openshift_portal_net=172.30.0.0/16
osm_host_subnet_length=8

# htpasswd auth
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]


# Enable API service auditing, available as of 3.2
openshift_master_audit_config={"enabled": false}


# Install the openshift examples
openshift_install_examples=true
openshift_examples_modify_imagestreams=true
oreg_url=registry.access.redhat.com/openshift3/ose-${component}:${version}
openshift_examples_modify_imagestreams=true

# Configure node kubelet arguments. pods-per-core is valid in OpenShift Origin 1.3 or OpenShift Container Platform 3.3 and later.
#openshift_node_kubelet_args={'pods-per-core': ['10'], 'max-pods': ['250'], 'image-gc-high-threshold': ['90'], 'image-gc-low-threshold': ['80']}
openshift_node_kubelet_args={'image-gc-high-threshold': ['90'], 'image-gc-low-threshold': ['80']}

# default project node selector
osm_default_node_selector='region=compute'

# OpenShift Router Options
openshift_hosted_router_selector='region=infra'

# Openshift Registry Options
openshift_hosted_registry_selector='region=infra'
openshift_hosted_registry_replicas=1

# Registry Storage Options

{% if number_of_cns_nodes == '3' %}
# GlusterFS
openshift_storage_glusterfs_namespace=cns
openshift_storage_glusterfs_name=cns
openshift_storage_glusterfs_wipe=True
openshift_storage_glusterfs_storageclass=true
openshift_storage_glusterfs_storageclass_default=true
openshift_storage_glusterfs_image=registry.access.redhat.com/rhgs3/rhgs-server-rhel7
openshift_storage_glusterfs_heketi_image=registry.access.redhat.com/rhgs3/rhgs-volmanager-rhel7
openshift_storage_glusterfs_heketi_version=v3.9
openshift_storage_glusterfs_block_deploy=True
openshift_storage_glusterfs_block_host_vol_create=true
openshift_storage_glusterfs_block_host_vol_size=20
openshift_storage_glusterfs_block_storageclass=true
{% endif %}

# Metrics deployment
openshift_master_metrics_public_url=https://metrics.{{_apps_dns}}
openshift_metrics_install_metrics=false
openshift_metrics_hawkular_hostname=metrics.{{_apps_dns}}
openshift_metrics_cassandra_pvc_size=2Gi
openshift_metrics_cassandra_storage_type=dynamic

openshift_metrics_cassandra_nodeselector={"region":"infra"}
openshift_metrics_hawkular_nodeselector={"region":"infra"}
openshift_metrics_heapster_nodeselector={"region":"infra"}

# Logging deployment
openshift_master_logging_public_url=https://logging.{{_apps_dns}}
openshift_logging_use_ops=false
openshift_logging_namespace=logging
openshift_logging_install_logging=false
openshift_logging_kibana_hostname=logging.{{_apps_dns}}
openshift_logging_es_pvc_size=10Gi
openshift_logging_es_pvc_dynamic=false
openshift_logging_es_pvc_storage_class_name=glusterfs-cns

openshift_logging_curator_nodeselector={"region":"infra"}
openshift_logging_es_nodeselector={"region":"infra"}
openshift_logging_fluentd_nodeselector={"fluentd":"true"}
openshift_logging_kibana_nodeselector={"region":"infra"}

# Prometheus
openshift_hosted_prometheus_deploy=false
openshift_prometheus_namespace=openshift-metrics
openshift_prometheus_node_selector={"region":"infra"}
openshift_prometheus_storage_kind=dynamic
openshift_prometheus_storage_volume_name=prometheus
openshift_prometheus_storage_volume_size=10Gi
openshift_prometheus_storage_type='pvc'
openshift_prometheus_alertmanager_storage_kind=dynamic
openshift_prometheus_alertmanager_storage_volume_name=prometheus-alertmanager
openshift_prometheus_alertmanager_storage_volume_size=1Gi
openshift_prometheus_alertmanager_storage_type='pvc'
openshift_prometheus_alertbuffer_storage_kind=dynamic
openshift_prometheus_alertbuffer_storage_volume_name=prometheus-alertbuffer
openshift_prometheus_alertbuffer_storage_volume_size=1Gi
openshift_prometheus_alertbuffer_storage_type='pvc'

# Service catalog
openshift_enable_service_catalog=false
ansible_service_broker_install=false
template_service_broker_install=false
dynamic_volumes_check=false
openshift_storageclass_name=glusterfs-cns
openshift_service_catalog_image_version=latest
ansible_service_broker_image_prefix=registry.access.redhat.com/openshift3/ose-
ansible_service_broker_registry_url="registry.access.redhat.com"
openshift_service_catalog_image_prefix=registry.access.redhat.com/openshift3/ose-
template_service_broker_selector={"region":"infra"}
openshift_template_service_broker_namespaces=['openshift']
openshift_hosted_etcd_storage_kind=dynamic
openshift_hosted_etcd_storage_volume_name=etcd-vol
openshift_hosted_etcd_storage_access_modes=["ReadWriteOnce"]
openshift_hosted_etcd_storage_volume_size=1Gi
openshift_hosted_etcd_storage_labels={'storage': 'etcd'}

openshift_generate_no_proxy_hosts=true

[masters]
{% for host in guests %}
{% if host.region == 'master' %}
{{host.name}}
{% endif %}
{% endfor %}


[etcd]
{% for host in guests %}
{% if host.region == 'master' %}
{{host.name}}
{% endif %}
{% endfor %}


[nodes]
{% for host in guests %}
{% if host.name != 'bastion' %}
{{host.name}} openshift_node_labels="{'region':'{{host.region}}', 'runtime':'cri-o'}"
{% endif %}
{% endfor %}

{% if number_of_cns_nodes == '3' %}
#CNS[glusterfs]
{% for host in guests %}
{% if host.cns is defined and host.cns %}
#CNS{{host.name}} glusterfs_ip={{hostvars[host.name]['ansible_default_ipv4']['address']}} glusterfs_devices='["/dev/{{ cns_storage_device }}"]'
{% endif %}
{% endfor %}
{% endif %}

