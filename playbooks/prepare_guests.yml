---
- name: Create in-memory inventory
  gather_facts: no
  hosts: localhost
  vars_files:
  - vars/guests.yml
  roles:
  - inmemory_inventory

- name: Figure out pool id from bastion subscription
  hosts: bast
  gather_facts: no
  serial: 1
  tasks:
  - name: check if host already registered
    command: subscription-manager list --available --match-installed --matches=*Openshift* --pool-only
    register: subs_result
    failed_when: false
    changed_when: "'This system is not yet registered' in subs_result.stderr"
  - name: Register hosts
    command: subscription-manager register --username={{ hostvars['localhost']['user'] }} --password={{ hostvars['localhost']['pwd'] }}
    retries: 5
    delay: 5
    when: subs_result.changed
  - name: Get pool id
    shell: "subscription-manager list --available --matches '*Openshift*' --pool-only | tail -n 1"
    register: poolid
    retries: 5
    delay: 5
  - debug:
      msg: |
        "Managed to find pool id {{poolid.stdout}}"
  - set_fact:
      poolid: "{{poolid.stdout}}"

- name: Register nodes to RHN and subscribe
  hosts: all
  gather_facts: true
  vars_files:
  - vars/guests.yml
  tasks:
  - name: Check Red Hat subscription
    redhat_subscription:
      state: present
      username: "{{ hostvars['localhost']['user'] }}"
      password: "{{ hostvars['localhost']['pwd'] }}"
      pool: "{{ hostvars['bastion']['poolid'] }}"
      #force_register: yes
    register: subscribe
    retries: 5
    delay: 5
  - debug:
      msg: "{{subscribe}}"
  - name: Disable all repos
    shell: |
      subscription-manager repos --disable=*
    retries: 5
    delay: 5
    when: subscribe.changed
  - name: Enable correct repos
    command: "subscription-manager repos --enable={{item}}"
    when: subscribe.changed
    retries: 5
    delay: 5
    with_items: "{{repos}}"
  - name: Ensure that required packages are present on target hosts
    yum:
      name: "{{item}}"
      state: latest
    retries: 5
    delay: 5
    with_items: "{{packages}}"

- name: Prepare bastion for OCP install
  gather_facts: False
  hosts: bast
  tasks:
  - name: Ensure that required packages are present on bastion host
    yum:
      name: "{{item}}"
      state: latest
    retries: 5
    delay: 5
    with_items: "{{packages_bastion}}"
  - name: Copy playbooks to bastion
    synchronize:
      src: /root/hetzner-ocp
      dest: /root/
  - name: Copy SSH keys from host to bastion
    copy:
      src: "{{item.src}}"
      dest: "{{item.dest}}"
      mode: 0600
      owner: cloud-user
    with_items:
    - {src: '/root/.ssh/id_rsa', dest: '/home/cloud-user/.ssh/id_rsa'}
    - {src: '/root/.ssh/id_rsa.pub', dest: '/home/cloud-user/.ssh/id_rsa.pub'}
    - {src: '/root/.ssh/known_hosts', dest: '/home/cloud-user/.ssh/known_hosts'}
  

- name: Gather facts from localhost
  hosts: localhost
  tasks:
  - debug: msg='Gathering facts'

- name: Update 7.4 to latest
  hosts: all
  remote_user: "{{remote_user}}"
  gather_facts: false
  tasks:
  - name: Update packages
    yum:
      name: '*'
      state: latest
  - name: Shutdown
    shell: sleep 2 && reboot
    async: 1
    poll: 0
    ignore_errors: true

- name: Restart all guest
  hosts: localhost
  gather_facts: no
  vars_files:
  - vars/guests.yml
  tasks:
  - name: Wait 10 secs for guests to shutdown
    pause:
      seconds: 10
  - name: Start all VMs
    virt:
      command: start
      name: "{{item.name}}"
    with_items: "{{guests}}"
    ignore_errors: yes

- name: Wait for guest to come back up
  hosts: all
  gather_facts: no
  tasks:
  - local_action:
      module: wait_for
      host: "{{ inventory_hostname }}"
      port: 22
      delay: 5
      timeout: 300

- name: Create inventory
  hosts: bast
  tasks:
  vars:
    ip_addr: "{{hostvars['localhost']['ansible_default_ipv4']['address']}}"
  roles:
  - { role: inventory}
- name: Install docker
  gather_facts: False
  hosts: nodes
  tasks:
  roles:
  - { role: docker_setup, device: '/dev/vdb'}
