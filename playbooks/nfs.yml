---
- name: Create in-memory inventory
  gather_facts: no
  hosts: localhost
  vars_files:
  - vars/guests.yml
  roles:
  - inmemory_inventory

- name: Create PV directories for NFS
  hosts: bastion
  gather_facts: yes
  tasks:
  - name: check is img file already created
    local_action:
      stat path=/var/lib/libvirt/images/bastion-nfs.img get_md5=no get_mime=no get_checksum=no
    register: bastion_nfs_img_result
    failed_when: false
  - name: check is disk already created
    local_action:
      shell virsh dumpxml bastion | grep bastion-nfs
    register: disk_attached
    failed_when: false
  - name: Create raw image for NFS
    local_action:
      "shell qemu-img create -f raw /var/lib/libvirt/images/bastion-nfs.img {{nfs_size}}"
    when: bastion_nfs_img_result.stat.exists == false

  - name: Add new disk to infranode01 as vdb
    local_action:
      "shell virsh attach-disk bastion --source /var/lib/libvirt/images/bastion-nfs.img --persistent --target vdb"
    when: disk_attached.rc != 0

  - name: Makefs for exports
    filesystem:
      fstype: xfs
      dev: /dev/vdb
    when: disk_attached.rc != 0

  - name: Create exports dir
    file:
      path: "{{nfs_dir}}"
      state: directory

  - name: Mount new disk to mount point
    mount:
      path: "{{nfs_dir}}"
      src: /dev/vdb
      fstype: xfs
      state: mounted

  - name: configure nfs ports 111,2049 to iptables
    iptables:
      chain: INPUT
      protocol: tcp
      destination_port: "{{item}}"
      jump: ACCEPT
      comment: "Accept trafic to {{item}}"
    with_items:
    - 111
    - 2049

  - name: ensure reguired package are installed
    package:
      name: "{{item}}"
      state: latest
    with_items:
    - nfs-utils
    - rpcbind

  - name: ensure reguired services are running
    service:
      name: "{{item}}"
      state: restarted
    with_items:
    - rpcbind
    - nfs-server
  - name: ensure openshift-ansible.exports file present
    file:
      path: /etc/exports.d/openshift-ansible.exports
      state: touch

  - name: "Setup NFS exports"
    lineinfile:
      dest: /etc/exports.d/openshift-ansible.exports
      state: present
      line: "{{nfs_dir}}/pv{{item}} *(rw,root_squash,no_wdelay)"
    with_items:
    - "{{nfs_pv_names}}"

  - name: "Create directories"
    file:
      path: "{{nfs_dir}}/pv{{item}}"
      state: directory
      owner: nfsnobody
      group: nfsnobody
      mode: 0777
    with_items:
    - "{{nfs_pv_names}}"
  - name: Refresh nfs exports
    command: exportfs -ra
  - name: Save bastion ip for later use
    set_fact:
      bastion_ip: "{{hostvars.bastion.ansible_eth0.ipv4.address}}"

- name: Create PV objects for NFS
  hosts: master01
  gather_facts: yes
  vars:
    nfshost: "{{ hostvars['bastion']['bastion_ip'] }}"
  tasks:
  - name: "Create dir for pv files"
    file:
      path: /tmp/pvs-nfs
      state: directory
  - name: "Create pv files"
    copy:
      dest: /tmp/pvs-nfs/pv{{item.0}}-nfs.yaml
      content: |
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: pv{{item.0}}-nfs
        spec:
          capacity:
            storage: {{item.1}}Gi
          accessModes:
            - ReadWriteOnce
            - ReadWriteMany
          persistentVolumeReclaimPolicy: Recycle
          nfs:
            path: {{nfs_dir}}/pv{{item.0}}
            server: {{nfshost}}
    with_together:
    - "{{nfs_pv_names}}"
    - "{{nfs_pv_sizes}}"
    register: pv_files

  - name: "Create PVs"
    command: "oc create -f /tmp/pvs-nfs/"
    when: pv_files.changed
